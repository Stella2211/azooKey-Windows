// thanks to https://github.com/ensan-hcl/AzooKeyKanaKanjiConverter/blob/develop/Sources/KanaKanjiConverterModule/Roman2Kana.swift
use std::collections::HashMap;
use std::sync::LazyLock;

use super::full_width::to_halfwidth;

#[allow(dead_code)]
static KANA_MAP: LazyLock<HashMap<&'static str, (&'static str, &'static str)>> =
    LazyLock::new(|| {
        HashMap::from([
            ("あ", ("ア", "ｱ")),
            ("ぁ", ("ァ", "ｧ")),
            ("い", ("イ", "ｲ")),
            ("ぃ", ("ィ", "ｨ")),
            ("う", ("ウ", "ｳ")),
            ("ゔ", ("ヴ", "ｳﾞ")),
            ("ぅ", ("ゥ", "ｩ")),
            ("え", ("エ", "ｴ")),
            ("ぇ", ("ェ", "ｪ")),
            ("お", ("オ", "ｵ")),
            ("ぉ", ("ォ", "ｫ")),
            ("か", ("カ", "ｶ")),
            ("が", ("ガ", "ｶﾞ")),
            ("か゚", ("カ゚", "ｶﾟ")),
            ("ゕ", ("ヵ", "ｶ")),
            ("き", ("キ", "ｷ")),
            ("ぎ", ("ギ", "ｷﾞ")),
            ("き゚", ("キ゚", "ｷﾟ")),
            ("く", ("ク", "ｸ")),
            ("ぐ", ("グ", "ｸﾞ")),
            ("く゚", ("ク゚", "ｸﾟ")),
            ("け", ("ケ", "ｹ")),
            ("げ", ("ゲ", "ｹﾞ")),
            ("け゚", ("ケ゚", "ｹﾟ")),
            ("ゖ", ("ヶ", "ｹ")),
            ("こ", ("コ", "ｺ")),
            ("ご", ("ゴ", "ｺﾞ")),
            ("こ゚", ("コ゚", "ｺﾟ")),
            ("さ", ("サ", "ｻ")),
            ("ざ", ("ザ", "ｻﾞ")),
            ("さ゚", ("サ゚", "ｻﾟ")),
            ("し", ("シ", "ｼ")),
            ("じ", ("ジ", "ｼﾞ")),
            ("し゚", ("シ゚", "ｼﾟ")),
            ("す", ("ス", "ｽ")),
            ("ず", ("ズ", "ｽﾞ")),
            ("す゚", ("ス゚", "ｽﾟ")),
            ("せ", ("セ", "ｾ")),
            ("ぜ", ("ゼ", "ｾﾞ")),
            ("せ゚", ("セ゚", "ｾﾟ")),
            ("そ", ("ソ", "ｿ")),
            ("ぞ", ("ゾ", "ｿﾞ")),
            ("そ゚", ("ソ゚", "ｿﾟ")),
            ("た", ("タ", "ﾀ")),
            ("だ", ("ダ", "ﾀﾞ")),
            ("た゚", ("タ゚", "ﾀﾟ")),
            ("ち", ("チ", "ﾁ")),
            ("ぢ", ("ヂ", "ﾁﾞ")),
            ("ち゚", ("チ゚", "ﾁﾟ")),
            ("つ", ("ツ", "ﾂ")),
            ("づ", ("ヅ", "ﾂﾞ")),
            ("つ゚", ("ツ゚", "ﾂﾟ")),
            ("っ", ("ッ", "ｯ")),
            ("て", ("テ", "ﾃ")),
            ("で", ("デ", "ﾃﾞ")),
            ("て゚", ("テ゚", "ﾃﾟ")),
            ("と", ("ト", "ﾄ")),
            ("ど", ("ド", "ﾄﾞ")),
            ("と゚", ("ト゚", "ﾄﾟ")),
            ("な", ("ナ", "ﾅ")),
            ("に", ("ニ", "ﾆ")),
            ("ぬ", ("ヌ", "ﾇ")),
            ("ね", ("ネ", "ﾈ")),
            ("の", ("ノ", "ﾉ")),
            ("は", ("ハ", "ﾊ")),
            ("ば", ("バ", "ﾊﾞ")),
            ("ぱ", ("パ", "ﾊﾟ")),
            ("ひ", ("ヒ", "ﾋ")),
            ("び", ("ビ", "ﾋﾞ")),
            ("ぴ", ("ピ", "ﾋﾟ")),
            ("ふ", ("フ", "ﾌ")),
            ("ぶ", ("ブ", "ﾌﾞ")),
            ("ぷ", ("プ", "ﾌﾟ")),
            ("へ", ("ヘ", "ﾍ")),
            ("べ", ("ベ", "ﾍﾞ")),
            ("ぺ", ("ペ", "ﾍﾟ")),
            ("ほ", ("ホ", "ﾎ")),
            ("ぼ", ("ボ", "ﾎﾞ")),
            ("ぽ", ("ポ", "ﾎﾟ")),
            ("ま", ("マ", "ﾏ")),
            ("み", ("ミ", "ﾐ")),
            ("む", ("ム", "ﾑ")),
            ("め", ("メ", "ﾒ")),
            ("も", ("モ", "ﾓ")),
            ("や", ("ヤ", "ﾔ")),
            ("ゃ", ("ャ", "ｬ")),
            ("ゆ", ("ユ", "ﾕ")),
            ("ゅ", ("ュ", "ｭ")),
            ("よ", ("ヨ", "ﾖ")),
            ("ょ", ("ョ", "ｮ")),
            ("ら", ("ラ", "ﾗ")),
            ("ら゚", ("ラ゚", "ﾗﾟ")),
            ("り", ("リ", "ﾘ")),
            ("り゚", ("リ゚", "ﾘﾟ")),
            ("る", ("ル", "ﾙ")),
            ("る゚", ("ル゚", "ﾙﾟ")),
            ("れ", ("レ", "ﾚ")),
            ("れ゚", ("レ゚", "ﾚﾟ")),
            ("ろ", ("ロ", "ﾛ")),
            ("ろ゚", ("ロ゚", "ﾛﾟ")),
            ("わ", ("ワ", "ﾜ")),
            ("ゎ", ("ヮ", "ﾜ")),
            ("ゐ", ("ヰ", "ｲ")),
            ("ゑ", ("ヱ", "ｴ")),
            ("を", ("ヲ", "ｦ")),
            ("ん", ("ン", "ﾝ")),
        ])
    });

pub fn to_katakana(s: &str) -> String {
    let mut result = String::new();
    let mut iter = s.chars().peekable();

    while let Some(c) = iter.next() {
        if let Some(&(katakana, _)) = KANA_MAP.get(&c.to_string().as_str()) {
            result.push_str(katakana);
        } else {
            result.push(c);
        }
    }

    result
}

pub fn to_half_katakana(s: &str) -> String {
    let mut result = String::new();
    let mut iter = s.chars().peekable();

    while let Some(c) = iter.next() {
        let c = to_halfwidth(&c.to_string()).chars().next().unwrap();

        if let Some(&(_, hankaku_katakana)) = KANA_MAP.get(&c.to_string().as_str()) {
            result.push_str(hankaku_katakana);
        } else {
            result.push(c);
        }
    }

    result
}
